{"version":3,"sources":["../../lib/index.tsx","App.tsx","index.tsx"],"names":["React","props","ref","value","dataSource","className","onBlur","onChange","onFocus","onConfirm","others","useState","matchedDSItem","setMatchedDSItem","_value","setValue","controlledValue","inputRef","useRef","wrapClassString","classNames","styles","inputClassString","completeClassString","type","e","text","i","onKeyDown","map","Object","assign","color","Math","random","toString","App","timelineList","setTimelineList","createRef","addTimelineItem","item","prevList","concat","idx","key","event","size","onClick","current","focus","Item","ReactDOM","render","document","getElementById"],"mappings":"4YAiFwBA,gBA1DsD,SAACC,EAAOC,G,IAC5EC,EAAkFF,EAAlFE,MAAOC,EAA2EH,EAA3EG,WAAYC,EAA+DJ,EAA/DI,UAAWC,EAAoDL,EAApDK,OAAQC,EAA4CN,EAA5CM,SAAUC,EAAkCP,EAAlCO,QAASC,EAAyBR,EAAzBQ,UAAcC,E,oIAAAA,CAAWT,gF,EAChDU,qBAAnCC,OAAeC,O,EACKF,mBAAS,IAA7BG,OAAQC,OACTC,EAAe,MAAGb,EAAH,EAArB,EAGMc,EAAWC,mBACjBlB,2BAA+B,kBAAMiB,EAAN,WAE/B,IAAME,EAAkBC,IAAW,WAAYC,EAA/C,GACMC,EAAmBF,IAAW,YAAaC,GAC3CE,EAAsBH,IAAW,eAAgBC,GA4BvD,OACE,yBAAKhB,UAAWc,GACdnB,yCACEE,IAAKe,EACLZ,UAAWiB,EACXnB,MAAOa,EACPQ,KAAK,OACLlB,OAAQA,EACRE,QAASA,EACTD,SAnCY,SAACkB,GAEjB,IAAMC,EAAOD,SAAb,MAKA,GAJAlB,GAAYA,EAAZA,GACAQ,MAGA,EAAW,OAAOF,EAAP,MACX,IAAMD,EAAgBR,EAAA,MAAgB,mBAAOuB,kBAAP,MACtCd,MA2BIe,UAxBa,SAACH,GAClB,aAAIA,OACJ,GAGA,IAAMC,EAAI,MAAGd,OAAH,EAAGA,EAAb,KACAG,KACAR,GAAYA,EAAZA,GAGAE,GAAaA,EAAbA,GACAI,WAIA,IAYE,yBAAKR,UAAWkB,GAAhB,MAAsCX,OAAtC,EAAsCA,EAb1C,UCxDIR,G,YAA+B,CACnC,CACEsB,KAAM,SACNvB,MAAO,UAET,CACEuB,KAAM,gBACNvB,MAAO,gBAET,CACEuB,KAAM,QACNvB,MAAO,SAET,CACEuB,KAAM,eACNvB,MAAO,eAET,CACEuB,KAAM,SACNvB,MAAO,UAET,CACEuB,KAAM,YACNvB,MAAO,cAET0B,KAAI,SAACF,GAAD,OACJG,OAAOC,OAAOJ,EAAG,CACfK,MAAO,KAAwB,SAAhBC,KAAKC,UAAwB,GAAGC,SAAS,UAsE7CC,MAlEf,WAAgB,IAAD,EAC2BzB,mBAKtC,IANW,mBACN0B,EADM,KACQC,EADR,KAOPpC,EAAMF,IAAMuC,YAMZC,EAAkB,SAACC,GACvBH,GAAgB,SAACI,GAAD,MAAc,CAACD,GAAME,OAAOD,OAiB9C,OACE,yBAAKrC,UAAU,OACb,iCACE,2CADF,WAEGD,EAAWyB,KAAI,SAACF,EAAGiB,GAAJ,OACd,kBAAC,IAAD,CAAKC,IAAKD,EAAKZ,MAAOL,EAAEK,OACrBL,EAAED,UAIT,iCACE,kBAAC,EAAD,CACExB,IAAKA,EACLG,UAAU,8BACVD,WAAYA,EACZG,SA7BS,SAACmB,GAChBc,EAAgB,CACdd,OACAoB,MAAO,YA2BHrC,UAvBU,SAACgC,GACjBD,EAAgB,CACdd,KAAMe,EAAKf,KACXoB,MAAO,eAsBL,kBAAC,IAAD,CAAQtB,KAAK,UAAUuB,KAAK,QAAQC,QAxC5B,WACZ9C,EAAI+C,QAASC,UAuCT,UAIF,iCACE,kBAAC,IAAD,KACGb,EAAaR,KAAI,SAACF,EAAGiB,GAAJ,OAChB,kBAAC,IAASO,KAAV,CAAeN,IAAKD,GAApB,UACUjB,EAAEmB,MADZ,KACqBnB,EAAED,aC1FnC0B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a441d7e0.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.css';\n\nexport interface Props {\n  value?: string;\n  dataSource: DataSourceItem[];\n  className?: string;\n  style?: React.CSSProperties;\n  placeholder?: string;\n  disabled?: boolean;\n  onBlur?: () => void;\n  onChange?: (text: string) => void;\n  onFocus?: () => void;\n  onConfirm?: (item: DataSourceItem) => void;\n}\n\nexport interface DataSourceItem {\n  value: string | number;\n  text: string;\n  [key: string]: any;\n}\n\nconst Autocomplete: React.ForwardRefRenderFunction<HTMLInputElement, Props> = (props, ref) => {\n  const { value, dataSource, className, onBlur, onChange, onFocus, onConfirm, ...others } = props;\n  const [matchedDSItem, setMatchedDSItem] = useState<DataSourceItem | null>();\n  const [_value, setValue] = useState('');\n  const controlledValue = value ?? _value;\n\n  // input ref\n  const inputRef = useRef<HTMLInputElement>();\n  React.useImperativeHandle(ref, () => inputRef.current!);\n\n  const wrapClassString = classNames('ria-wrap', styles.wrap, className);\n  const inputClassString = classNames('ria-input', styles.input);\n  const completeClassString = classNames('ria-complete', styles.complete);\n\n  const _onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    // trigger onChange\n    const text = e.target.value;\n    onChange && onChange(text);\n    setValue(text);\n\n    // search matched data source item\n    if (!text) return setMatchedDSItem(null);\n    const matchedDSItem = dataSource.find((i) => i.text.startsWith(text));\n    setMatchedDSItem(matchedDSItem);\n  };\n\n  const _onConfirm = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter') return;\n    if (!matchedDSItem) return;\n\n    // trigger onChange\n    const text = matchedDSItem?.text;\n    setValue(text);\n    onChange && onChange(text);\n\n    // trigger onConfirm and reset\n    onConfirm && onConfirm(matchedDSItem);\n    setMatchedDSItem(null);\n  };\n\n  return (\n    <div className={wrapClassString}>\n      <input\n        ref={inputRef as any}\n        className={inputClassString}\n        value={controlledValue}\n        type=\"text\"\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={_onChange}\n        onKeyDown={_onConfirm}\n        {...others}\n      />\n      <div className={completeClassString}>{matchedDSItem?.text}</div>\n    </div>\n  );\n};\n\nconst RefAutoComplete = React.forwardRef<HTMLInputElement, Props>(Autocomplete);\nexport default RefAutoComplete;\n","import React, { useState } from 'react';\nimport { Button, Tag, Timeline } from 'antd';\nimport InlineAutocomplete from 'react-inline-autocomplete';\nimport { DataSourceItem } from 'react-inline-autocomplete/dist';\nimport 'react-inline-autocomplete/dist/index.css';\nimport './App.scss';\n\nconst dataSource: DataSourceItem[] = [\n  {\n    text: 'Google',\n    value: 'Google',\n  },\n  {\n    text: 'Google Search',\n    value: 'GoogleSearch',\n  },\n  {\n    text: 'Apple',\n    value: 'Apple',\n  },\n  {\n    text: 'Apple Pencil',\n    value: 'ApplePencil',\n  },\n  {\n    text: 'Amazon',\n    value: 'Amazon',\n  },\n  {\n    text: 'Microsoft',\n    value: 'Microsoft',\n  },\n].map((i) =>\n  Object.assign(i, {\n    color: '#' + ((Math.random() * 0xffffff) << 0).toString(16),\n  })\n);\n\nfunction App() {\n  const [timelineList, setTimelineList] = useState<\n    {\n      text: string;\n      event: string;\n    }[]\n  >([]);\n  const ref = React.createRef<HTMLInputElement>();\n\n  const focus = () => {\n    ref.current!.focus();\n  };\n\n  const addTimelineItem = (item: { text: string; event: string }) => {\n    setTimelineList((prevList) => [item].concat(prevList));\n  };\n\n  const onChange = (text: string) => {\n    addTimelineItem({\n      text,\n      event: 'change',\n    });\n  };\n\n  const onConfirm = (item: DataSourceItem) => {\n    addTimelineItem({\n      text: item.text,\n      event: 'confirm',\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <section>\n        <b>Data Source:</b>&nbsp;&nbsp;\n        {dataSource.map((i, idx) => (\n          <Tag key={idx} color={i.color}>\n            {i.text}\n          </Tag>\n        ))}\n      </section>\n      <section>\n        <InlineAutocomplete\n          ref={ref}\n          className=\"inline-autocomplete-example\"\n          dataSource={dataSource}\n          onChange={onChange}\n          onConfirm={onConfirm}\n        ></InlineAutocomplete>\n        <Button type=\"primary\" size=\"large\" onClick={focus}>\n          Focus\n        </Button>\n      </section>\n      <section>\n        <Timeline>\n          {timelineList.map((i, idx) => (\n            <Timeline.Item key={idx}>\n              Event: {i.event}, {i.text}\n            </Timeline.Item>\n          ))}\n        </Timeline>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}