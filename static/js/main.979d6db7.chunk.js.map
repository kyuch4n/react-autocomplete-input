{"version":3,"sources":["../../lib/key-enum.ts","../../lib/index.tsx","App.tsx","index.tsx"],"names":["KeyEnum","React","props","ref","value","dataSource","className","navigate","caseSensitive","onBlur","onFocus","onChange","onPressEnter","onSelect","others","useState","innerVal","setInnerVal","matchedDataSource","setMatchedDataSource","activeIndex","setActiveIndex","ctrlValue","inputRef","useRef","updateValue","updateMatchedDataSource","text","ignoreCase","wrapClassString","classNames","styles","inputClassString","completeClassString","completeContent","breakUp","type","e","onKeyDown","Object","matchedDataSourceItem","idx","map","i","assign","color","Math","random","toString","App","timelineList","setTimelineList","createRef","addTimelineItem","item","prevList","concat","key","event","size","onClick","current","focus","Item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.979d6db7.chunk.js","sourcesContent":["export enum KeyEnum {\n  TAB = 'Tab',\n  ENTER = 'Enter',\n  ARROW_UP = 'ArrowUp',\n  ARROW_DOWN = 'ArrowDown',\n}\n","import React, { useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport ignoreCase from 'ignore-case';\nimport { KeyEnum } from './key-enum';\nimport styles from './index.module.css';\n\nexport interface Props {\n  value?: string;\n  dataSource: DataSourceItem[];\n  className?: string;\n  style?: React.CSSProperties;\n  placeholder?: string;\n  disabled?: boolean;\n  navigate?: boolean;\n  caseSensitive?: boolean;\n  onBlur?: () => void;\n  onFocus?: () => void;\n  onChange?: (value: string) => void;\n  onPressEnter?: (value: string) => void;\n  onSelect?: (item: DataSourceItem) => void;\n}\n\nexport interface DataSourceItem {\n  text: string;\n  value: string | number;\n  [key: string]: any;\n}\n\nconst Autocomplete: React.ForwardRefRenderFunction<HTMLInputElement, Props> = (props, ref) => {\n  const {\n    value,\n    dataSource,\n    className,\n    navigate = true,\n    caseSensitive = true,\n    onBlur,\n    onFocus,\n    onChange,\n    onPressEnter,\n    onSelect,\n    ...others\n  } = props;\n  const [innerVal, setInnerVal] = useState('');\n  const [matchedDataSource, setMatchedDataSource] = useState<DataSourceItem[]>();\n  const [activeIndex, setActiveIndex] = useState(0);\n  const ctrlValue = value ?? innerVal;\n\n  /**\n   * inputRef\n   */\n  const inputRef = useRef<HTMLInputElement>();\n  React.useImperativeHandle(ref, () => inputRef.current!);\n\n  const updateValue = (value: string) => {\n    onChange && onChange(value);\n    setInnerVal(value);\n  };\n\n  const updateMatchedDataSource = (value?: string) => {\n    setActiveIndex(0);\n    value\n      ? setMatchedDataSource(\n          dataSource.filter(({ text }) => {\n            return caseSensitive\n              ? text.startsWith(value) && text !== value\n              : ignoreCase.startsWith(text, value) && !ignoreCase.equals(text, value);\n          })\n        )\n      : setMatchedDataSource([]);\n  };\n\n  /**\n   * InputChange Handler\n   * @param e\n   */\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    updateValue(value);\n    updateMatchedDataSource(value);\n  };\n\n  /**\n   * KeyDown Handler\n   * deal with `Tab` | `Enter` | `ArrowUp` | `ArrowDown`\n   * @param e\n   */\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (Object.values(KeyEnum).includes(e.key as KeyEnum)) {\n      e.preventDefault();\n    }\n\n    switch (e.key) {\n      case KeyEnum.TAB:\n        const matchedDataSourceItem = matchedDataSource?.[activeIndex];\n        if (!matchedDataSourceItem) return;\n\n        /**\n         * onChange >>> onSelect >>> Search matched item\n         */\n        const { text } = matchedDataSourceItem;\n        updateValue(text);\n        onSelect && onSelect(matchedDataSourceItem);\n        updateMatchedDataSource(text);\n        break;\n      case KeyEnum.ENTER:\n        /**\n         * onPressEnter >>> Reset\n         */\n        onPressEnter && onPressEnter(ctrlValue);\n        updateMatchedDataSource();\n        break;\n      case KeyEnum.ARROW_UP:\n        if (!navigate) break;\n\n        setActiveIndex((idx) => {\n          if (matchedDataSource?.length) {\n            return (idx - 1 + matchedDataSource.length) % matchedDataSource.length;\n          }\n          return 0;\n        });\n        break;\n      case KeyEnum.ARROW_DOWN:\n        if (!navigate) break;\n\n        setActiveIndex((idx) => {\n          if (matchedDataSource?.length) {\n            return (idx + 1) % matchedDataSource.length;\n          }\n          return 0;\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  const breakUp = () => {\n    return matchedDataSource?.[activeIndex]?.text\n      ? `${ctrlValue}${matchedDataSource[activeIndex].text.slice(ctrlValue.length)}`\n      : undefined;\n  };\n\n  const wrapClassString = classNames('ria-wrap', styles.wrap, className); // `className` should cover `styles.wrap`\n  const inputClassString = classNames('ria-input', styles.input);\n  const completeClassString = classNames('ria-complete', styles.complete);\n  const completeContent = breakUp();\n\n  return (\n    <div className={wrapClassString}>\n      <input\n        ref={inputRef as any}\n        className={inputClassString}\n        value={ctrlValue}\n        type=\"text\"\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        {...others}\n      />\n      <div className={completeClassString}>{completeContent}</div>\n    </div>\n  );\n};\n\nconst RefAutoComplete = React.forwardRef<HTMLInputElement, Props>(Autocomplete);\nexport default RefAutoComplete;\n","import React, { useState } from 'react';\nimport { Button, Tag, Timeline } from 'antd';\nimport InlineAutocomplete from 'react-inline-autocomplete';\nimport { DataSourceItem } from 'react-inline-autocomplete/dist';\nimport 'react-inline-autocomplete/dist/index.css';\nimport './App.scss';\n\nconst dataSource: DataSourceItem[] = [\n  {\n    text: 'Amazon',\n    value: 'Amazon',\n  },\n  {\n    text: 'Google',\n    value: 'Google',\n  },\n  {\n    text: 'Google Search',\n    value: 'GoogleSearch',\n  },\n  {\n    text: 'Apple',\n    value: 'Apple',\n  },\n  {\n    text: 'Apple Pencil',\n    value: 'ApplePencil',\n  },\n  {\n    text: 'Apple Watch',\n    value: 'AppleWatch',\n  },\n  {\n    text: 'Apple Power',\n    value: 'ApplePower',\n  },\n].map((i) =>\n  Object.assign(i, {\n    color: '#' + ((Math.random() * 0xffffff) << 0).toString(16),\n  })\n);\n\nfunction App() {\n  const [timelineList, setTimelineList] = useState<\n    {\n      value: string;\n      event: string;\n    }[]\n  >([]);\n  const ref = React.createRef<HTMLInputElement>();\n\n  const focus = () => {\n    ref.current!.focus();\n  };\n\n  const addTimelineItem = (item: { value: string; event: string }) => {\n    setTimelineList((prevList) => [item].concat(prevList));\n  };\n\n  const onChange = (value: string) => {\n    addTimelineItem({\n      value,\n      event: 'Change',\n    });\n  };\n\n  const onPressEnter = (value: string) => {\n    addTimelineItem({\n      value,\n      event: 'PressEnter',\n    });\n  };\n\n  const onSelect = (item: DataSourceItem) => {\n    addTimelineItem({\n      value: item.text,\n      event: 'Select',\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <section>\n        {/* <b>Data Source:</b>&nbsp;&nbsp; */}\n        {dataSource.map((i, idx) => (\n          <Tag key={idx} color={i.color}>\n            {i.text}\n          </Tag>\n        ))}\n      </section>\n      <section>\n        <InlineAutocomplete\n          ref={ref}\n          className=\"inline-autocomplete-example\"\n          dataSource={dataSource}\n          caseSensitive={false}\n          onChange={onChange}\n          onSelect={onSelect}\n          onPressEnter={onPressEnter}\n        ></InlineAutocomplete>\n        <Button type=\"primary\" size=\"large\" onClick={focus}>\n          Focus\n        </Button>\n      </section>\n      <section>\n        <Timeline>\n          {timelineList.map((i, idx) => (\n            <Timeline.Item key={idx}>\n              <pre>\n                Event: {i.event}, {i.value}\n              </pre>\n            </Timeline.Item>\n          ))}\n        </Timeline>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}