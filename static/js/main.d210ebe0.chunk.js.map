{"version":3,"sources":["../../lib/key-enum.ts","../../lib/index.tsx","App.tsx","index.tsx"],"names":["KeyEnum","React","props","ref","value","dataSource","className","onBlur","onFocus","onChange","onPressEnter","onSelect","others","useState","_value","setValue","matchedDataSource","setMatchedDataSource","activeIndex","setActiveIndex","controlledValue","inputRef","useRef","updateValue","wrapClassString","classNames","styles","inputClassString","completeClassString","type","e","i","onKeyDown","Object","matchedDataSourceItem","idx","text","map","assign","color","Math","random","toString","App","timelineList","setTimelineList","createRef","addTimelineItem","item","prevList","concat","key","event","size","onClick","current","focus","Item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d210ebe0.chunk.js","sourcesContent":["export enum KeyEnum {\n  TAB = 'Tab',\n  ENTER = 'Enter',\n  ARROW_UP = 'ArrowUp',\n  ARROW_DOWN = 'ArrowDown',\n}\n","import React, { useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { KeyEnum } from './key-enum';\nimport styles from './index.module.css';\n\nexport interface Props {\n  value?: string;\n  dataSource: DataSourceItem[];\n  className?: string;\n  style?: React.CSSProperties;\n  placeholder?: string;\n  disabled?: boolean;\n  onBlur?: () => void;\n  onFocus?: () => void;\n  onChange?: (value: string) => void;\n  onPressEnter?: (value: string) => void;\n  onSelect?: (item: DataSourceItem) => void;\n}\n\nexport interface DataSourceItem {\n  text: string;\n  value: string | number;\n  [key: string]: any;\n}\n\nconst Autocomplete: React.ForwardRefRenderFunction<HTMLInputElement, Props> = (props, ref) => {\n  const {\n    value,\n    dataSource,\n    className,\n    onBlur,\n    onFocus,\n    onChange,\n    onPressEnter,\n    onSelect,\n    ...others\n  } = props;\n  let [_value, setValue] = useState('');\n  let [matchedDataSource, setMatchedDataSource] = useState<DataSourceItem[]>();\n  let [activeIndex, setActiveIndex] = useState(0);\n  let controlledValue = value ?? _value;\n\n  const inputRef = useRef<HTMLInputElement>();\n  React.useImperativeHandle(ref, () => inputRef.current!);\n\n  const updateValue = (value: string) => {\n    onChange && onChange(value);\n    setValue(value);\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    updateValue(value);\n\n    if (!value) return setMatchedDataSource([]);\n    setActiveIndex(0);\n    setMatchedDataSource(\n      dataSource.filter((i) => {\n        return i.text.startsWith(value) && i.text !== value;\n      })\n    );\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (Object.values(KeyEnum).includes(e.key as KeyEnum)) {\n      e.preventDefault();\n    }\n\n    switch (e.key) {\n      case KeyEnum.TAB:\n        let matchedDataSourceItem = matchedDataSource?.[activeIndex];\n        if (!matchedDataSourceItem) return;\n\n        updateValue(matchedDataSourceItem.text);\n        onSelect && onSelect(matchedDataSourceItem);\n        setMatchedDataSource([]);\n        break;\n      case KeyEnum.ARROW_UP:\n        setActiveIndex((idx) => {\n          if (matchedDataSource?.length) {\n            return (idx - 1 + matchedDataSource.length) % matchedDataSource.length;\n          }\n          return 0;\n        });\n        break;\n      case KeyEnum.ARROW_DOWN:\n        setActiveIndex((idx) => {\n          if (matchedDataSource?.length) {\n            return (idx + 1) % matchedDataSource.length;\n          }\n          return 0;\n        });\n        break;\n      case KeyEnum.ENTER:\n        onPressEnter && onPressEnter(controlledValue);\n        setMatchedDataSource([]);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const wrapClassString = classNames('ria-wrap', styles.wrap, className);\n  const inputClassString = classNames('ria-input', styles.input);\n  const completeClassString = classNames('ria-complete', styles.complete);\n\n  return (\n    <div className={wrapClassString}>\n      <input\n        ref={inputRef as any}\n        className={inputClassString}\n        value={controlledValue}\n        type=\"text\"\n        onBlur={onBlur}\n        onFocus={onFocus}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        {...others}\n      />\n      <div className={completeClassString}>{matchedDataSource?.[activeIndex]?.text}</div>\n    </div>\n  );\n};\n\nconst RefAutoComplete = React.forwardRef<HTMLInputElement, Props>(Autocomplete);\nexport default RefAutoComplete;\n","import React, { useState } from 'react';\nimport { Button, Tag, Timeline } from 'antd';\nimport InlineAutocomplete from 'react-inline-autocomplete';\nimport { DataSourceItem } from 'react-inline-autocomplete/dist';\nimport 'react-inline-autocomplete/dist/index.css';\nimport './App.scss';\n\nconst dataSource: DataSourceItem[] = [\n  {\n    text: 'Amazon',\n    value: 'Amazon',\n  },\n  {\n    text: 'Google',\n    value: 'Google',\n  },\n  {\n    text: 'Google Search',\n    value: 'GoogleSearch',\n  },\n  {\n    text: 'Apple',\n    value: 'Apple',\n  },\n  {\n    text: 'Apple Pencil',\n    value: 'ApplePencil',\n  },\n  {\n    text: 'Apple Watch',\n    value: 'AppleWatch',\n  },\n  {\n    text: 'Apple Power',\n    value: 'ApplePower',\n  },\n].map((i) =>\n  Object.assign(i, {\n    color: '#' + ((Math.random() * 0xffffff) << 0).toString(16),\n  })\n);\n\nfunction App() {\n  const [timelineList, setTimelineList] = useState<\n    {\n      value: string;\n      event: string;\n    }[]\n  >([]);\n  const ref = React.createRef<HTMLInputElement>();\n\n  const focus = () => {\n    ref.current!.focus();\n  };\n\n  const addTimelineItem = (item: { value: string; event: string }) => {\n    setTimelineList((prevList) => [item].concat(prevList));\n  };\n\n  const onChange = (value: string) => {\n    addTimelineItem({\n      value,\n      event: 'Change',\n    });\n  };\n\n  const onPressEnter = (value: string) => {\n    addTimelineItem({\n      value,\n      event: 'PressEnter',\n    });\n  };\n\n  const onSelect = (item: DataSourceItem) => {\n    addTimelineItem({\n      value: item.text,\n      event: 'Select',\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <section>\n        {/* <b>Data Source:</b>&nbsp;&nbsp; */}\n        {dataSource.map((i, idx) => (\n          <Tag key={idx} color={i.color}>\n            {i.text}\n          </Tag>\n        ))}\n      </section>\n      <section>\n        <InlineAutocomplete\n          ref={ref}\n          className=\"inline-autocomplete-example\"\n          dataSource={dataSource}\n          onChange={onChange}\n          onSelect={onSelect}\n          onPressEnter={onPressEnter}\n        ></InlineAutocomplete>\n        <Button type=\"primary\" size=\"large\" onClick={focus}>\n          Focus\n        </Button>\n      </section>\n      <section>\n        <Timeline>\n          {timelineList.map((i, idx) => (\n            <Timeline.Item key={idx}>\n              <pre>\n                Event: {i.event}, {i.value}\n              </pre>\n            </Timeline.Item>\n          ))}\n        </Timeline>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}